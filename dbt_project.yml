
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'
version: '1.0.0'
config-version: 2

dbt-cloud:
    project-id: 70471823414842
# This setting configures which "profile" dbt uses for this project.
profile: 'default'

vars:
  buss_dt: var('buss_dt', '9999-01-01')
  run_id: var('buss_dt', '99990101')

on-run-start:
  - "{{ validate_required_params() }}"
  - "INSERT INTO {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_info select '{{invocation_id }}','{{ var('buss_dt') }}',{{ var('run_id') }},current_timestamp(),null;"
on-run-end:
  - "update {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_info set end_time=current_timestamp() where run_id = {{ var('run_id') }}"
  - "{{ log_status() }}"
  - "{{ log_errors() }}"  

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  my_new_project:
    Marts:
      +pre-hook:
        - "insert into {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_dtl_info select '{{ invocation_id }}','model','{{ this.identifier }}','{{ var('buss_dt') }}', {{ var('run_id') }}, 'Running', current_timestamp(),null"
      +post-hook:
        - "update {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_dtl_info set status='Completed',end_time = current_timestamp() where run_id = {{ var('run_id') }} and  component_name = '{{ this.identifier }}'"
      Dim:
        SCD-1:
          +materialized: incremental
          +incremental_strategy: merge
          +on_schema_change: fail
        SCD-2:
          +materialized: incremental
          +incremental_strategy: merge
          +on_schema_change: fail
          +unique_key: scd_key
          +merge_update_columns: ['end_cal_dim_id']
        Profile:
          +materialized: incremental
          +incremental_strategy: append
          +on_schema_change: fail
      Fact:
        +materialized: incremental
        +incremental_strategy: append
        +on_schema_change: fail
      work_tables:
        +materialized: table                                
      views:
        +materialized: view
snapshots:
  my_new_project:
      +pre-hook:
        - "insert into {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_dtl_info select '{{ invocation_id }}','snapshot','{{ this.identifier }}','{{ var('buss_dt') }}', {{ var('run_id') }}, 'Running', current_timestamp(),null"
      +post-hook:
        - "update {{ env_var('DBT_AUDIT_SCHEMA') }}.dbt_run_dtl_info set status='Completed',end_time = current_timestamp() where run_id = {{ var('run_id') }} and  component_name = '{{ this.identifier }}'"
